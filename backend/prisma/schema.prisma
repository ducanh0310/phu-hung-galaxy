// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id            String        @id
  name          String        @unique
  icon          String
  subcategories Subcategory[]
}

model Subcategory {
  id         String    @id
  name       String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  products   Product[]
}

model Product {
  id            String      @id @default(cuid())
  name          String
  price         Float
  imageUrl      String
  description   String
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId String
  cartItems     CartItem[]
  orderItems    OrderItem[]
}

model Admin {
  id           String @id @default(cuid())
  username     String @unique
  passwordHash String
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  cart         Cart?
  orders       Order[]
}

// --- Shopping Cart and Orders ---

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int

  @@unique([cartId, productId])
}

model Order {
  id              String      @id @default(cuid())
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  items           OrderItem[]
  total           Float
  status          OrderStatus @default(PENDING)
  shippingAddress String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float // Price at the time of purchase
}